##########################################
# ? Basic Application Info
##########################################

# This sets the application name (used by Eureka for service registration)
spring.application.name=api-gateway

# Port on which the API Gateway will run
server.port=8070


##########################################
# ? Eureka Client Configuration
##########################################

# The Eureka Server URL where this gateway will register itself
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Enables registration of the API Gateway as a Eureka client
eureka.client.register-with-eureka=true

# Enables fetching service registry information from Eureka
# This is how the Gateway discovers other microservices dynamically
eureka.client.fetch-registry=true


##########################################
# ? Spring Cloud Gateway + Discovery Locator
##########################################

# Automatically creates routes for all services registered with Eureka
# So that you don't have to define every route manually
spring.cloud.gateway.discovery.locator.enabled=true

# Converts service IDs to lowercase to avoid case-sensitivity issues
spring.cloud.gateway.discovery.locator.lower-case-service-id=true


##########################################
#  Custom Route Configurations
##########################################

# Route for the Movie Catalog Service
spring.cloud.gateway.routes[0].id=movie-catalog-service
# Route path to match requests like /movie-info/**
spring.cloud.gateway.routes[0].predicates[0]=Path=/movie-info/**
# The logical name of the microservice (as registered in Eureka)
spring.cloud.gateway.routes[0].uri=lb://MOVIE-CATALOG-SERVICE

#  Route for the Movie Streaming Service
spring.cloud.gateway.routes[1].id=movie-streaming-service
# Route path to match requests like /stream/**
spring.cloud.gateway.routes[1].predicates[0]=Path=/stream/**
# Logical Eureka service name for load-balanced calls
spring.cloud.gateway.routes[1].uri=lb://MOVIE-STREAMING-SERVICE


##########################################
#  Filters
##########################################

# Removes the first segment of the path (/movie-info or /stream)
# before forwarding the request to the target service
# Example: /movie-info/details ? /details
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1


##########################################
#  Logging for Debugging
##########################################

# Enables detailed logs for Spring Cloud Gateway behavior
logging.level.org.springframework.cloud.gateway=DEBUG

# Enables detailed logs for Spring LoadBalancer (useful when debugging service discovery/load-balancing issues)
logging.level.org.springframework.cloud.loadbalancer=DEBUG

# Enables logs for HTTP client requests and responses between Gateway and downstream services
logging.level.reactor.netty.http.client.HttpClient=DEBUG














#spring.application.name=api-gateway
#
#server.port=8070
#
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka
#eureka.client.register-with-eureka=true
#eureka.client.fetch-registry=true
#
#spring.cloud.gateway.server.webflux.discovery.locator.enabled=true
#spring.cloud.gateway.server.webflux.discovery.locator.lower-case-service-id=true
#
#spring.cloud.gateway.server.webflux.routes[0].id=movie-catalog-service
#spring.cloud.gateway.server.webflux.routes[0].predicates[0]=Path=/movie-info/**
#spring.cloud.gateway.server.webflux.routes[0].uri=lb://MOVIE-CATALOG-SERVICE
#
#
#spring.cloud.gateway.server.webflux.routes[1].id=movie-streaming-service
#spring.cloud.gateway.server.webflux.routes[1].predicates[0]=Path=/stream/**
#spring.cloud.gateway.server.webflux.routes[1].uri=lb://MOVIE-STREAMING-SERVICE
#
#
## Strip the first prefix segment
#spring.cloud.gateway.server.webflux.routes[0].filters[0]=StripPrefix=1
#spring.cloud.gateway.server.webflux.routes[1].filters[0]=StripPrefix=1
#
#logging.level.org.springframework.cloud.gateway=DEBUG
#logging.level.org.springframework.cloud.loadbalancer=DEBUG
#logging.level.reactor.netty.http.client.HttpClient=DEBUG
